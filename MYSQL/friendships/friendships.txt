SELECT * FROM friendships_schema.users;
SELECT * FROM friendships_schema.friendships;

----------Query: Create 6 new users
INSERT INTO friendships_schema.users(first_name, last_name, created_at, updated_at)
VALUES('Haley', 'Welliver', NOW(), NOW()),
('Sophia', 'Martinez', NOW(), NOW()),
('Aishani', 'Saha', NOW(), NOW()),
('Chase', 'Price', NOW(), NOW()),
('Peter', 'Mohammadi', NOW(), NOW()),
('Ethan', 'Sandford', NOW(), NOW())

SELECT * FROM friendships_schema.users;


----------Query: Have user 1 be friends with user 2, 4 and 6
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(1,2, now(), now()),
(1,4, now(), now()),
(1,6, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Have user 2 be friends with user 1, 3 and 5
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(2, 1, now(), now()),
(2, 3, now(), now()),
(2, 5, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Have user 3 be friends with user 2 and 5
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(3, 2, now(), now()),
(3, 5, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Have user 4 be friends with user 3
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(4, 3, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Have user 5 be friends with user 1 and 6
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(5, 1, now(), now()),
(5, 6, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Have user 6 be friends with user 2 and 3
insert into friendships_schema.friendships(user_id, friend_id, created_at, updated_at)
value(6, 2, now(), now()),
(6, 3, now(), now());

SELECT * FROM friendships_schema.friendships;


----------Query: Display the relationships created as shown in the table in the above image
select users.first_name, users.last_name, user2.first_name as friend_first_name, user2.last_name as friend_last_name from users
join friendships on users.id = friendships.user_id
left join users as user2 on user2.id = friendships.friend_id;


----------NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.
select users.first_name, users.last_name, user2.first_name as friend_first_name, user2.last_name as friend_last_name from users
join friendships on users.id = friendships.user_id
left join users as user2 on user2.id = friendships.friend_id
where users.id =1;


----------NINJA Query: Return the count of all friendships
select count(*) from friendships_schema.friendships


----------NINJA Query: Find out who has the most friends and return the count of their friends.
select max(friend_id) from friendships_schema.friendships;


----------NINJA Query: Return the friends of the third user in alphabetical order
select users.first_name, users.last_name, user2.first_name as friend_first_name, user2.last_name as friend_last_name from users
join friendships on users.id = friendships.user_id
left join users as user2 on user2.id = friendships.friend_id
where users.id =3
order by friend_first_name asc;
